{"version":3,"sources":["logo.svg","Talents.js","Jobs.js","components/common/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","talents","Talents","props","phrase","react_default","a","createElement","Fragment","filter","talent","match","RegExp","map","key","Jobs","footerStyles","makeStyles","root","background","border","boxShadow","color","padding","& a","Footer","classes","className","classnames","Grid","container","item","xs","href","SearchBar","value","onChange","App","console","log","process","_useState","useState","_useState2","Object","slicedToArray","setPhrase","e","target","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79801a8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst talents = [\"John\", \"Jerry\", \"Merry\"];\nexport function Talents(props) {\n  const { phrase } = props;\n  return (<div>\n    <h2>Talents</h2>\n    <React.Fragment>\n      {talents\n        .filter(talent => phrase ? talent.match(new RegExp(phrase, 'i')) : true)\n        .map((talent, key) => (<li key={key}>{talent}</li>))}\n    </React.Fragment>\n  </div>);\n}\n","import React from \"react\";\nconst jobs = [\"front end\", \"back end\", \"full stack\"];\n\nexport function Jobs() {\n  // your code here\n  return <div>\n    <h2>Jobs</h2>\n  </div>;\n}\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\nimport classnames from 'classnames';\n\nconst footerStyles = makeStyles({\n  root: {\n    background: '#333',\n    border: 0,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    padding: '30px',\n    '& a': {\n      color: 'white',\n    }\n  },\n});\n\nexport function Footer() {\n  const classes = footerStyles();\n  return (\n    <div className={classnames(\"Footer\", classes.root)}>\n      <div className=\"mainContainer\">\n        <Grid container>\n          <Grid item xs={3}>\n            <div>Job Boards</div>\n            <ul>\n              <li>\n                <a href=\"https://hired.com/x/1cebk\">Hired</a>\n              </li>\n              <li>\n                <a href=\"https://woo.io\">Woo.io</a>\n              </li>\n              <li>\n                <a href=\"https://www.linkedin.com\">LinkedIn</a>\n              </li>\n              <li>\n                <a href=\"https://angel.co\">Angel.co</a>\n              </li>\n              <li>\n                <a href=\"https://www.indeed.com/\">indeed</a>\n              </li>\n              <li>\n                <a href=\"https://www.dice.com/\">Dice</a>\n              </li>\n            </ul>\n          </Grid>\n          <Grid xs={3}>\n            <div>Interview Preperation</div>\n            <ul>\n              <li><a href=\"http://interviewcake.com\">InterviewCake</a></li>\n              <li><a href=\"https://www.pramp.com/#/\">Pramp</a></li>\n              <li><a href=\"https://leetcode.com\">LeetCode</a></li>\n              <li><a href=\"https://www.hackerrank.com\">HackerRank</a></li>\n            </ul>\n          </Grid>\n          <Grid xs={3}>\n            <div>Agents</div>\n            <ul>\n              <li><a href=\"https://www.teksystems.com/en\">TEKSystems</a></li>\n              <li><a href=\"https://www.modis.com/\">modis</a></li>\n              <li><a href=\"http://xoriant.com\">xoriant</a></li>\n              <li><a href=\"http://www.collabera.com/\">Collabera</a></li>\n              <li><a href=\"http://www.infinity-cs.com\">Infinity Consulting Solutions</a></li>\n              <li><a href=\"https://www.ustechsolutions.com/\">US Tech Solutions</a></li>\n            </ul>\n          </Grid>\n          <Grid xs={3}>\n            <div>Join Us</div>\n            <ul>\n              <li>Welcome to fork and submit pull request.</li>\n              <li>Email me if you want to join the team weijingjaylin(at)gmail.com</li>\n            </ul>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n","import { createStore} from \"redux\";\nimport { Provider } from \"react-redux\";\nimport React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Talents } from \"./Talents\";\nimport { Jobs } from \"./Jobs\";\nimport { Footer } from \"./components/common/Footer\";\n\nfunction SearchBar(props) {\n  return <input\n    value={props.phrase}\n    onChange={props.onChange}\n  />;\n}\n\nfunction App() {\n  console.log('process.env', process.env);\n  const [phrase, setPhrase] = useState(\"\");\n  let handlePhraseChange = (e) => {\n    console.log(e.target.value);\n    setPhrase(e.target.value);\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"top\"></div>\n      <div className=\"mainContainer\">\n        <h1>JOB MATCHING</h1>\n        <SearchBar value={phrase} onChange={handlePhraseChange}/>\n        <Talents phrase={phrase}/>\n        <Jobs />\n      </div>\n      <div className=\"footer\">\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}